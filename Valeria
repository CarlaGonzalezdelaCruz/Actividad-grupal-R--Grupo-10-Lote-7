Dataset_expresión_genes <- read_csv("Master en Bioinformática/Estadística y R para Ciencias de la Salud/Actividad grupal/Dataset expresión genes.csv")
Dataset_expresión_genes <- Dataset_expresión_genes %>%  filter(id != 14)

library(tidyverse)
library(factoextra)
library(gtsummary)
library(gt)
library(car) # Levene
library(broom) #Tabla regresion


any(is.na(Dataset_expresión_genes)) #Confirmo que no hay datos NA

datos_expresiongenica <- Dataset_expresión_genes %>%
  select(starts_with("AQ_"))

#### 2. PCA

#Normalidad de exp genica con shapiro
resultados_saphiro <- apply(datos_expresiongenica, 2, function(x) shapiro.test(x)$p.value)
resultados_saphiro
#creo una tabla con los datos de normalidad
tabla_resultados <- data.frame(
  Variantes = colnames(datos_expresiongenica),
  p_valor = format(resultados_saphiro, digits = 3, scientific = TRUE), 
  Test = rep("Shapiro-Wilk", length(resultados_saphiro)), 
  Interpretacion = ifelse(resultados_saphiro < 0.05, "No normal", "Normal")
)
tabla_resultados

#PCA
pca<- prcomp(datos_expresiongenica, scale=TRUE)
summary(pca)

eigenvalues <- get_eigenvalue(pca)
eigenvalues_formatted <- eigenvalues
eigenvalues_formatted[] <- lapply(eigenvalues_formatted, function(x) sprintf("%.3f", as.numeric(x)))
print(eigenvalues_formatted) #5 dim

fviz_eig(pca, addlabels = TRUE, ylim = c(0, 50)) 

# Crear una tabla con los componentes principales y R2
tabla_pca_r2 <- data.frame(
  Componente = paste0("Dim.", 1:5),  # Selecciona las primeras 5 dimensiones
  R2 = sprintf("%.3f", eigenvalues$variance.percent[1:5])  # Extrae y formatea el porcentaje de varianza explicada
)

tabla_pca_r2

##Tabla PCA cargas
# Obtener las cargas de las variables en los componentes principales
cargas <- pca$rotation  # Las cargas están en la matriz 'rotation'

# Seleccionar solo los primeros n componentes (en este caso, 5 componentes)
cargas_seleccionadas <- as.data.frame(cargas[, 1:5])

# Añadir los nombres de las variables como una columna
cargas_seleccionadas <- tibble::rownames_to_column(cargas_seleccionadas, var = "Variable")

# Renombrar las columnas para mayor claridad
colnames(cargas_seleccionadas) <- c("Variable", "Componente 1", "Componente 2", 
                                    "Componente 3", "Componente 4", "Componente 5")

# Formatear las cargas con 3 decimales
cargas_seleccionadas <- cargas_seleccionadas %>%
  mutate(across(-Variable, ~ sprintf("%.3f", .)))

# Mostrar la tabla
cargas_seleccionadas

### Correlación entre dimensiones y funciones biológicas:
#Componente 1:Inflamación Sistémica y Señalización Celular

#Componente 2: Regulación Inmune y Estrés Oxidativo

#Componente 3: Metabolismo Celular y Resistencia al Estrés

#Componente 4: Homeostasis Metabólica y Respuesta Antioxidante

#Componente 5: Inflamación y Diferenciación Inmune

#### 3.	Crear gráficos descriptivos de los componentes principales

var <- get_pca_var(pca)
var

fviz_pca_var(pca, col.var = "black")

variables_1_2 <- fviz_pca_var(
  pca, 
  col.var = "cos2", 
  gradient.cols = c("blue", "yellow", "red"), 
  repel = TRUE # Evitar el solapamiento de etiquetas
)

variables_1_3 <- fviz_pca_var(
  pca, 
  axes = c(1, 3),  # Comparar la Dim 1 y Dim 3
  col.var = "cos2", 
  gradient.cols = c("blue", "yellow", "red"), 
  repel = TRUE  # Evitar el solapamiento de etiquetas
)

variables_1_4 <- fviz_pca_var(
  pca, 
  axes = c(1, 4),  # Comparar la Dim 1 y Dim 3
  col.var = "cos2", 
  gradient.cols = c("blue", "yellow", "red"), 
  repel = TRUE  # Evitar el solapamiento de etiquetas
)

variables_1_5 <- fviz_pca_var(
  pca, 
  axes = c(1, 5),  # Comparar la Dim 1 y Dim 3
  col.var = "cos2", 
  gradient.cols = c("blue", "yellow", "red"), 
  repel = TRUE  # Evitar el solapamiento de etiquetas
)

variables_2_3 <- fviz_pca_var(
  pca, 
  axes = c(2, 3),  # Comparar la Dim 1 y Dim 3
  col.var = "cos2", 
  gradient.cols = c("blue", "yellow", "red"), 
  repel = TRUE  # Evitar el solapamiento de etiquetas
)

variables_3_4 <- fviz_pca_var(
  pca, 
  axes = c(3, 4),  # Comparar la Dim 1 y Dim 3
  col.var = "cos2", 
  gradient.cols = c("blue", "yellow", "red"))

fviz_cos2(pca, choice = "var", axes = 1:2)

fviz_contrib(pca, choice = "var", axes = 1, top = 10)

fviz_contrib(pca, choice = "var", axes = 2, top = 10)

fviz_contrib(pca, choice = "var", axes = 3, top = 10)

fviz_contrib(pca, choice = "var", axes = 4, top = 10)

fviz_contrib(pca, choice = "var", axes = 5, top = 10)

fviz_pca_ind(pca, col.var = "cos2",
  gradient.cols = c("blue", "yellow", "red"),
  repel = TRUE)

fviz_pca_ind(pca, pointsize = "cos2",
             repel = TRUE)

# Realizar k-means sobre las variables 
kmeans_var <- kmeans(t(pca$rotation), centers = 3)  # Transponer para que las variables sean filas

# Crear un vector que indique el cluster al que pertenece cada variable
grupo_var <- as.factor(kmeans_var$cluster)

# Visualizar las variables del PCA agrupadas por sus clusters
fviz_pca_var(
  pca,
  col.var = grupo_var,                    # Colorear variables por clusters
  palette = c("grey", "yellow", "blue"),  # Paleta de colores
  legend.title = "Cluster",               # Título de la leyenda
  repel = TRUE                            # Evitar superposición de etiquetas
)


##### 4.	Crear una tabla descriptiva con las variables más importantes

pca_ind <- as.data.frame(pca$x) # Extraer los valores de los componentes principales (scores) para los individuos

# Dividir en terciles para cada componente
terciles_componente_1 <- quantile(pca_ind$PC1, probs = c(0, 1/3, 2/3, 1))
terciles_componente_2 <- quantile(pca_ind$PC2, probs = c(0, 1/3, 2/3, 1))
terciles_componente_3 <- quantile(pca_ind$PC3, probs = c(0, 1/3, 2/3, 1))
terciles_componente_4 <- quantile(pca_ind$PC4, probs = c(0, 1/3, 2/3, 1))
terciles_componente_5 <- quantile(pca_ind$PC5, probs = c(0, 1/3, 2/3, 1))

# Asignar a cada muestra su tercil correspondiente
# Creo una nueva tabla que dice para cada paciente y componente, a cual tercil corresponde el valor del score
pca_terciles <- data.frame(
  row = rownames(pca_ind),
  Componente_1 = cut(pca_ind$PC1, breaks = terciles_componente_1, labels = c("T1", "T2", "T3"), include.lowest = TRUE),
  Componente_2 = cut(pca_ind$PC2, breaks = terciles_componente_2, labels = c("T1", "T2", "T3"), include.lowest = TRUE),
  Componente_3 = cut(pca_ind$PC3, breaks = terciles_componente_3, labels = c("T1", "T2", "T3"), include.lowest = TRUE),
  Componente_4 = cut(pca_ind$PC4, breaks = terciles_componente_4, labels = c("T1", "T2", "T3"), include.lowest = TRUE),
  Componente_5 = cut(pca_ind$PC5, breaks = terciles_componente_5, labels = c("T1", "T2", "T3"), include.lowest = TRUE)
)

pca_terciles

# Evalua normalidad de la distribución de la expresión génica
#Anderson-Darling
genes <- names(Dataset_expresión_genes)[startsWith(names(Dataset_expresión_genes), "AQ")]

length(genes) #46

pvalues_adtest <- data.frame(
  Gen = character(46),                     
  Anderson_Darling_pvalue = numeric(46)    
)

for (i in 1:46) {
  pvalues_adtest[i,1] <- genes[i]
  adtest_result <- ad.test(Dataset_expresión_genes[[genes[i]]])
  pvalues_adtest[i,2] <- sprintf("%.5f", adtest_result$p.value)
}

print(arrange(pvalues_adtest, Anderson_Darling_pvalue))

# El p-valor para todas las expresiones génicas es menor a 0.05, por lo que se concluye que ningún gen mostró distribución normal según el test de Anderson-Darling
# En la tabla, calcularemos mediana y IQR


# Tabla 3 
# Creo primero una tabla que combina solo los datos que necesito, osea genes y tercil (e id)
# La convierto a long para poder aplicar luego strata

Dataset_expresión_genes <- Dataset_expresión_genes %>%
  mutate(row = row_number())

expgenica_terciles <- Dataset_expresión_genes %>%
  select(row, starts_with("AQ_")) %>%
  mutate(row = as.numeric(row)) %>% 
  left_join(pca_terciles %>% mutate(row = as.numeric(row)), by = "row") 

expgenica_CP1 <- select(expgenica_terciles, starts_with("AQ_"), Componente_1)

levene_CP1 <- data.frame(
  Gen = character(46),                     
  pvalue = numeric(46)    
)

for (i in 1:46) {
  levene_CP1[i,1] <- genes[i]
  levene <- leveneTest(expgenica_CP1[[genes[i]]], expgenica_CP1$Componente_1)
  levene_CP1[i,2] <- levene$`Pr(>F)`[1]
}

levene_CP1$Homogeneidad <- ifelse(levene_CP1$pvalue > 0.05, "Sí", "No")

print(arrange(levene_CP1, pvalue))

CP1_hom <- levene_CP1 %>% # Usamos ANOVA
  filter(Homogeneidad == "Sí") %>%
  pull(Gen)

CP1_no_hom <- levene_CP1 %>% # Usamos K-W
  filter(Homogeneidad == "No") %>%
  pull(Gen)  

resumen_CP1 <- expgenica_CP1 %>%
  tbl_summary(by = Componente_1,
              statistic = all_continuous() ~ "{median} ({p25} - {p75})",
              digits = all_continuous() ~ function(x) format(x, digits = 2, scientific = TRUE)) %>%
  add_p(test = list(all_of(CP1_hom) ~ "aov",
                    all_of(CP1_no_hom) ~ "kruskal.test"),
        pvalue_fun = ~ style_pvalue(.x, digits = 3))


expgenica_CP2 <- select(expgenica_terciles, starts_with("AQ_"), Componente_2)

levene_CP2 <- data.frame(
  Gen = character(46),                     
  pvalue = numeric(46)    
)

for (i in 1:46) {
  levene_CP2[i,1] <- genes[i]
  levene <- leveneTest(expgenica_CP2[[genes[i]]], expgenica_CP2$Componente_2)
  levene_CP2[i,2] <- levene$`Pr(>F)`[1]
}

levene_CP2$Homogeneidad <- ifelse(levene_CP2$pvalue > 0.05, "Sí", "No")

print(arrange(levene_CP2, pvalue))

CP2_hom <- levene_CP2 %>% # Usamos ANOVA
  filter(Homogeneidad == "Sí") %>%
  pull(Gen)

CP2_no_hom <- levene_CP2 %>% # Usamos K-W
  filter(Homogeneidad == "No") %>%
  pull(Gen)  

resumen_CP2 <- expgenica_CP2 %>%
  tbl_summary(by = Componente_2,
              statistic = all_continuous() ~ "{median} ({p25} - {p75})",
              digits = all_continuous() ~ function(x) format(x, digits = 2, scientific = TRUE)) %>%
  add_p(test = list(all_of(CP2_hom) ~ "aov",
                    all_of(CP2_no_hom) ~ "kruskal.test"),
        pvalue_fun = ~ style_pvalue(.x, digits = 3))


expgenica_CP3 <- select(expgenica_terciles, starts_with("AQ_"), Componente_3)

levene_CP3 <- data.frame(
  Gen = character(46),                     
  pvalue = numeric(46)    
)

for (i in 1:46) {
  levene_CP3[i,1] <- genes[i]
  levene <- leveneTest(expgenica_CP3[[genes[i]]], expgenica_CP3$Componente_3)
  levene_CP3[i,2] <- levene$`Pr(>F)`[1]
}

levene_CP3$Homogeneidad <- ifelse(levene_CP3$pvalue > 0.05, "Sí", "No")

print(arrange(levene_CP3, pvalue))

CP3_hom <- levene_CP3 %>% # Usamos ANOVA
  filter(Homogeneidad == "Sí") %>%
  pull(Gen)

CP3_no_hom <- levene_CP3 %>% # Usamos K-W
  filter(Homogeneidad == "No") %>%
  pull(Gen)  

resumen_CP3 <- expgenica_CP3 %>%
  tbl_summary(by = Componente_3,
              statistic = all_continuous() ~ "{median} ({p25} - {p75})",
              digits = all_continuous() ~ function(x) format(x, digits = 2, scientific = TRUE)) %>%
  add_p(test = list(all_of(CP3_hom) ~ "aov",
                    all_of(CP3_no_hom) ~ "kruskal.test"),
        pvalue_fun = ~ style_pvalue(.x, digits = 3))


expgenica_CP4 <- select(expgenica_terciles, starts_with("AQ_"), Componente_4)

levene_CP4 <- data.frame(
  Gen = character(46),                     
  pvalue = numeric(46)    
)

for (i in 1:46) {
  levene_CP4[i,1] <- genes[i]
  levene <- leveneTest(expgenica_CP4[[genes[i]]], expgenica_CP4$Componente_4)
  levene_CP4[i,2] <- levene$`Pr(>F)`[1]
}

levene_CP4$Homogeneidad <- ifelse(levene_CP4$pvalue > 0.05, "Sí", "No")

print(arrange(levene_CP4, pvalue))

CP4_hom <- levene_CP4 %>% # Usamos ANOVA
  filter(Homogeneidad == "Sí") %>%
  pull(Gen)

CP4_no_hom <- levene_CP4 %>% # Usamos K-W
  filter(Homogeneidad == "No") %>%
  pull(Gen)  

resumen_CP4 <- expgenica_CP4 %>%
  tbl_summary(by = Componente_4,
              statistic = all_continuous() ~ "{median} ({p25} - {p75})",
              digits = all_continuous() ~ function(x) format(x, digits = 2, scientific = TRUE)) %>%
  add_p(test = list(all_of(CP4_hom) ~ "aov",
                    all_of(CP4_no_hom) ~ "kruskal.test"),
        pvalue_fun = ~ style_pvalue(.x, digits = 3))



expgenica_CP5 <- select(expgenica_terciles, starts_with("AQ_"), Componente_5)

levene_CP5 <- data.frame(
  Gen = character(46),                     
  pvalue = numeric(46)    
)

for (i in 1:46) {
  levene_CP5[i,1] <- genes[i]
  levene <- leveneTest(expgenica_CP5[[genes[i]]], expgenica_CP5$Componente_5)
  levene_CP5[i,2] <- levene$`Pr(>F)`[1]
}

levene_CP5$Homogeneidad <- ifelse(levene_CP5$pvalue > 0.05, "Sí", "No")

print(arrange(levene_CP5, pvalue))

CP5_hom <- levene_CP5 %>% # Usamos ANOVA
  filter(Homogeneidad == "Sí") %>%
  pull(Gen)

CP5_no_hom <- levene_CP5 %>% # Usamos K-W
  filter(Homogeneidad == "No") %>%
  pull(Gen)  

resumen_CP5 <- expgenica_CP5 %>%
  tbl_summary(by = Componente_5,
              statistic = all_continuous() ~ "{median} ({p25} - {p75})",
              digits = all_continuous() ~ function(x) format(x, digits = 2, scientific = TRUE)) %>%
  add_p(test = list(all_of(CP5_hom) ~ "aov",
                    all_of(CP5_no_hom) ~ "kruskal.test"),
        pvalue_fun = ~ style_pvalue(.x, digits = 3))


#### 5.	Implementar un modelo de regresión logística

unique(Dataset_expresión_genes$extension)

dataset_expresión_terciles <- Dataset_expresión_genes %>% #creo un nuevo dataframe con toda la info que puedo llegar a necestiar
  mutate(row = as.numeric(row)) %>%
  left_join(pca_terciles %>% mutate(row = as.numeric(row)), by = "row") %>% #Uno la df original con los terciles
  mutate(metastasis = factor(if_else(extension == "metastasico", "sí", "no"))) %>% #creo la columna metastaris para ralizar la regresion logistica
  select(-c(1, 2, 57, 105)) #elimino las columnas ...1, id, row (que cree en el codigo del 3 para unir las df) y extension (ya que ahora tengo la de metastasis)

modelo_logistica_componentes <- glm(metastasis ~ Componente_1 + Componente_2 + Componente_3 + Componente_4 + Componente_5, 
                        data= dataset_expresión_terciles, family = "binomial")

# Convertir coeficientes en OR (exponenciar)
resultado_logistica_componentes <- tidy(modelo_logistica_componentes, exponentiate = TRUE, conf.int = TRUE) 

resultado_logistica_componentes %>%
  select(term, estimate, conf.low, conf.high, p.value) %>%
  mutate(OR_IC = sprintf("%.2f (%.2f - %.2f)", estimate, conf.low, conf.high),
         p.value = format.pval(p.value, digits = 3, eps = 0.001)) %>%
  select(term, OR_IC, p.value) %>%
  gt()


#reg para parametros bioquimicos

bioquimica <- c('glucosa', 'leucocitos', 'linfocitos', 'neutrofilos', 'chol', 'hdl', 'hierro', 'igA', 'igE', 'igG', 'igN', 'ldl', 'pcr', 'transferrina', 'trigliceridos', 'cpk')

modelo_logistica_bioquimica <- glm(metastasis ~ ., 
                         data = dataset_expresión_terciles %>% select(metastasis, all_of(bioquimica)), 
                         family = "binomial")

resultado_logistica_bioquimica <- tidy(modelo_logistica_bioquimica, exponentiate = TRUE, conf.int = TRUE) 

resultado_logistica_bioquimica %>%
  select(term, estimate, conf.low, conf.high, p.value) %>%
  mutate(OR_IC = sprintf("%.2f (%.2f - %.2f)", estimate, conf.low, conf.high),
         p.value = format.pval(p.value, digits = 3, eps = 0.001)) %>%
  select(term, OR_IC, p.value) %>%
  gt()

sintomas <- c('tos', 'disnea', 'expect', 'secrecion', 'dolor_garg', 'escalofrios', 'fiebre', 
              'cansancio', 'cefalea', 'mareo', 'nauseas', 'vomitos', 'diarrea', 'dolor_hueso', 
              'dolor_abdo', 'perd_ape', 'disgueusia')

dataset_expresión_terciles_sintomas <- dataset_expresión_terciles %>%
  mutate(across(all_of(sintomas), ~ if_else(. == "si", 1, if_else(. == "no", 0, NA_real_)))) #convierto a 0 y 1 para que no salgan raros los nombres de la primera fila

modelo_logistica_sintomas <- glm(metastasis ~ ., 
                                   data = dataset_expresión_terciles_sintomas %>% select(metastasis, all_of(sintomas)), 
                                   family = "binomial")

resultado_logistica_sintomas <- tidy(modelo_logistica_sintomas, exponentiate = TRUE, conf.int = TRUE) 

resultado_logistica_sintomas %>%
  select(term, estimate, conf.low, conf.high, p.value) %>%
  mutate(OR_IC = sprintf("%.2f (%.2f - %.2f)", estimate, conf.low, conf.high),
         p.value = format.pval(p.value, digits = 2, eps = 0.001)) %>%
  select(term, OR_IC, p.value) %>%
  gt()

# la presencia de dolor abdominar y disnea son un riesgo estadisticamente significativo

sociodemograficas <- c ('edad', 'sexo')

dataset_expresión_terciles_sociodemograficas <- dataset_expresión_terciles %>%
  mutate(sexo = if_else(sexo == "mujer", 1, if_else(sexo == "varon", 0, NA_real_)))

modelo_logistica_sociodemograficas <- glm(metastasis ~ ., 
                                 data = dataset_expresión_terciles_sociodemograficas %>% select(metastasis, all_of(sociodemograficas)), 
                                 family = "binomial")

resultado_logistica_sociodemograficas <- tidy(modelo_logistica_sociodemograficas, exponentiate = TRUE, conf.int = TRUE) 

resultado_logistica_sociodemograficas %>%
  select(term, estimate, conf.low, conf.high, p.value) %>%
  mutate(OR_IC = sprintf("%.2f (%.2f - %.2f)", estimate, conf.low, conf.high),
         p.value = format.pval(p.value, digits = 3, eps = 0.001)) %>%
  select(term, OR_IC, p.value) %>%
  gt()


comorbilidades <- c("exfumador", "hta", "dm", "alergia", "cardiopatia", 
                    "neumopatia", "hepatopatia", "colelitiasis", "utolitiasis", 
                    "ITU", "renal", "neuropatia")

dataset_expresión_terciles_comorbilidades <- dataset_expresión_terciles %>%
  mutate(across(all_of(comorbilidades), ~ if_else(. == "si", 1, if_else(. == "no", 0, NA_real_)))) 


modelo_logistica_comorbilidades <- glm(metastasis ~ ., 
                                          data = dataset_expresión_terciles_comorbilidades %>% select(metastasis, all_of(comorbilidades)), 
                                          family = "binomial")

resultado_logistica_comorbilidades <- tidy(modelo_logistica_comorbilidades, exponentiate = TRUE, conf.int = TRUE) 

resultado_logistica_comorbilidades %>%
  select(term, estimate, conf.low, conf.high, p.value) %>%
  mutate(OR_IC = sprintf("%.2f (%.2f - %.2f)", estimate, conf.low, conf.high),
         p.value = format.pval(p.value, digits = 3, eps = 0.001)) %>%
  select(term, OR_IC, p.value) %>%
  gt()
