•	Crea una tabla que incluya las estadísticas descriptivas de los valores sin transformar (media + desviación estándar si son paramétricas, 
mediana + rango intercuartílico (p25-p75) si no lo son) por terciles de cada componente del PCA (ver modelo de Tabla descriptiva adjuntada al final de documento en la sección «Extensión y formato»). 
Para calcular los terciles de un conjunto de datos, primero se determinan los puntos de corte que dividen el conjunto en tres partes iguales. Utilizando la función quantile, 
se calculan los valores en los que el 33.33% y el 66.67% de los datos se encuentran por debajo, lo que nos da los primeros y segundos terciles, respectivamente.
Luego, para asignar a cada dato una categoría de tercil, se utiliza la función cut. Esto clasifica los datos en tres grupos según estos puntos de corte, etiquetándolos como «t1», «t2» o «t3» para los primeros, segundos y terceros terciles. 
Así, cada dato en la columna PC1 se categoriza en uno de los tres terciles basándose en su valor relativo.

pca_ind <- as.data.frame(pca$x) # Extraer los valores de los componentes principales (scores) para los individuos

# Dividir en terciles para cada componente
terciles_componente_1 <- quantile(pca_ind$PC1, probs = c(0, 1/3, 2/3, 1))
terciles_componente_2 <- quantile(pca_ind$PC2, probs = c(0, 1/3, 2/3, 1))
terciles_componente_3 <- quantile(pca_ind$PC3, probs = c(0, 1/3, 2/3, 1))
terciles_componente_4 <- quantile(pca_ind$PC4, probs = c(0, 1/3, 2/3, 1))
terciles_componente_5 <- quantile(pca_ind$PC5, probs = c(0, 1/3, 2/3, 1))

# Asignar a cada muestra su tercil correspondiente
# Creo una nueva tabla que dice para cada paciente y componente, a cual tercil corresponde el valor del score
pca_terciles <- data.frame(
  Tercil_PC1 = cut(pca_ind$PC1, breaks = terciles_componente_1, labels = c("T1", "T2", "T3"), include.lowest = TRUE),
  Tercil_PC2 = cut(pca_ind$PC2, breaks = terciles_componente_2, labels = c("T1", "T2", "T3"), include.lowest = TRUE),
  Tercil_PC3 = cut(pca_ind$PC3, breaks = terciles_componente_3, labels = c("T1", "T2", "T3"), include.lowest = TRUE),
  Tercil_PC4 = cut(pca_ind$PC4, breaks = terciles_componente_4, labels = c("T1", "T2", "T3"), include.lowest = TRUE),
  Tercil_PC5 = cut(pca_ind$PC5, breaks = terciles_componente_5, labels = c("T1", "T2", "T3"), include.lowest = TRUE)
)

pca_terciles

# Evalua normalidad de la distribución de la expresión génica
#Anderson-Darling
genes <- names(Dataset_expresión_genes)[startsWith(names(Dataset_expresión_genes), "AQ")]

length(genes) #46

pvalues_adtest <- data.frame(
  Gen = character(46),                     
  Anderson_Darling_pvalue = numeric(46)    
)

for (i in 1:46) {
  pvalues_adtest[i,1] <- genes[i]
  adtest_result <- ad.test(Dataset_expresión_genes[[genes[i]]])
  pvalues_adtest[i,2] <- sprintf("%.5f", adtest_result$p.value)
}

print(arrange(pvalues_adtest, Anderson_Darling_pvalue))

# El p-valor para todas las expresiones génicas es menor a 0.05, por lo que se concluye que ningún gen mostró distribución normal según el test de Anderson-Darling
# En la tabla, calcularemos mediana y IQR

# Evaluamos homogeneidad de varianzas con Levene para seleccionar con qué test calcular p
# Crear df vacia
resultados_levene <- data.frame(
  Gen = character(),                     
  Componente = character(),
  pvalue = numeric()    
)

genes <- colnames(Dataset_expresión_genes %>% select(starts_with("AQ_")))

# Iterar sobre los componentes principales
for (comp in colnames(pca_terciles)) {
  
  # Agregar la variable categórica correspondiente al dataset
  df_temp <- Dataset_expresión_genes %>%
    mutate(Tercil = pca_terciles[[comp]])
  
  # Iterar sobre los genes
  for (gen in genes) {
    
    # Aplicar Levene Test
    levene <- leveneTest(df_temp[[gen]], df_temp$Tercil)
    p_valor <- levene$`Pr(>F)`[1]
    
    # Agregar resultado a la tabla
    resultados_levene <- resultados_levene %>%
      add_row(Gen = gen, Componente = comp, pvalue = p_valor)
  }
}

# Agregar interpretación de homogeneidad de varianzas
resultados_levene <- resultados_levene %>%
  mutate(Homogeneidad = ifelse(pvalue > 0.05, "Sí", "No"))

# Ordenar por valor p
resultados_levene <- arrange(resultados_levene, pvalue)
resultados_levene
